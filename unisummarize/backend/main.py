from fastapi import FastAPI, File, UploadFile, Form, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import Optional
import uvicorn
import io
import os
import tempfile
import fitz  # PyMuPDF
import docx
import pytesseract
from PIL import Image
from newspaper import Article
from sumy.parsers.plaintext import PlaintextParser
from sumy.nlp.tokenizers import Tokenizer
from sumy.summarizers.lsa import LsaSummarizer
from sumy.summarizers.text_rank import TextRankSummarizer
from transformers import pipeline

app = FastAPI()

# Allow CORS for frontend
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Adjust for production
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Initialize transformers summarization pipeline once
summarizer_pipeline = pipeline("summarization")

@app.get("/")
async def root():
    return {"message": "Backend API is running"}

class SummarizeRequest(BaseModel):
    input_type: str
    content: Optional[str] = None
    format: str
    domain: str = "general"

def extract_text_from_pdf(file_path):
    doc = fitz.open(file_path)
    text = ""
    for page in doc:
        text += page.get_text()
    return text

def extract_text_from_docx(file_path):
    doc = docx.Document(file_path)
    fullText = []
    for para in doc.paragraphs:
        fullText.append(para.text)
    return '\n'.join(fullText)

def extract_text_from_url(url):
    article = Article(url)
    article.download()
    article.parse()
    return article.text

def extract_text_from_image(file_path):
    image = Image.open(file_path)
    text = pytesseract.image_to_string(image)
    return text

def get_domain_config(domain):
    """Get domain-specific configuration for summarization."""
    configs = {
        "education": {
            "sentences_count": 6,
            "max_length": 250,
            "min_length": 100,
            "style": "academic",
            "keywords": ["learning", "education", "study", "research", "academic"]
        },
        "medical": {
            "sentences_count": 7,
            "max_length": 300,
            "min_length": 150,
            "style": "medical",
            "keywords": ["health", "medical", "clinical", "patient", "treatment"]
        },
        "business": {
            "sentences_count": 5,
            "max_length": 200,
            "min_length": 100,
            "style": "business",
            "keywords": ["business", "market", "company", "strategy", "financial"]
        },
        "technical": {
            "sentences_count": 8,
            "max_length": 350,
            "min_length": 150,
            "style": "technical",
            "keywords": ["technical", "system", "technology", "engineering", "development"]
        },
        "news": {
            "sentences_count": 4,
            "max_length": 150,
            "min_length": 75,
            "style": "news",
            "keywords": ["news", "report", "update", "current", "event"]
        },
        "general": {
            "sentences_count": 5,
            "max_length": 200,
            "min_length": 100,
            "style": "general",
            "keywords": []
        }
    }
    return configs.get(domain, configs["general"])

def format_summary(summary, format_type, domain_config):
    """Format the summary based on the chosen format and domain style."""
    if format_type == "bullet":
        # summary is a string with bullet points as generated by AI
        # Split summary string into sentences by period
        sentences = [s.strip() for s in summary.split('.') if s.strip()]
        list_items = "".join(f"<li>{sentence}.</li>" for sentence in sentences)
        return f"<ul class='domain-{domain_config['style']}'>{list_items}</ul>"
    elif format_type == "paragraph":
        # summary is a list of sentences
        paragraph = " ".join([str(sentence).strip() for sentence in summary])
        return f"<p class='domain-{domain_config['style']}'>{paragraph}</p>"
    else:  # detailed
        # summary is a list of sentences, split into paragraphs of 3 sentences each
        paragraphs = []
        sentences = [str(sentence).strip() for sentence in summary]
        for i in range(0, len(sentences), 3):
            para = " ".join(sentences[i:i+3])
            paragraphs.append(f"<p class='domain-{domain_config['style']}'>{para}</p>")
        return "\n".join(paragraphs)

def summarize_text(text, summary_format, domain="general"):
    """Generate a domain-specific summary of the text."""
    domain_config = get_domain_config(domain)
    
    # Use transformers pipeline for summarization
    max_length = domain_config["max_length"]
    min_length = domain_config["min_length"]
    
    # transformers pipeline expects input length limit, so chunk if needed
    max_chunk = 1000
    text_chunks = [text[i:i+max_chunk] for i in range(0, len(text), max_chunk)]
    
    summaries = []
    for chunk in text_chunks:
        if summary_format == "bullet":
            prompt = "Summarize the following text as bullet points:\n" + chunk
            summary = summarizer_pipeline(prompt, max_length=max_length, min_length=min_length, do_sample=False)[0]['summary_text']
        else:
            summary = summarizer_pipeline(chunk, max_length=max_length, min_length=min_length, do_sample=False)[0]['summary_text']
        summaries.append(summary)
    
    # Combine summaries
    combined_summary = " ".join(summaries)
    
    if summary_format == "bullet":
        # Split summary string into sentences by period
        sentences = [s.strip() for s in combined_summary.split('.') if s.strip()]
        list_items = "".join(f"<li>{sentence}.</li>" for sentence in sentences)
        return f"<ul class='domain-{domain_config['style']}'>{list_items}</ul>"
    else:
        # For paragraph and detailed, split into sentences
        sentences = [s.strip() for s in combined_summary.split('.') if s.strip()]
        return format_summary(sentences, summary_format, domain_config)

@app.post("/api/summarize")
async def summarize_content(req: SummarizeRequest):
    if not req.content:
        raise HTTPException(status_code=400, detail="Content is required")
    try:
        if req.input_type == "url":
            text = extract_text_from_url(req.content)
        else:
            text = req.content
        summary = summarize_text(text, req.format, req.domain)
        print(f"DEBUG: Generated summary (format={req.format}): {summary}")
        return {"summary": summary}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/summarize/file")
async def summarize_file(
    file: UploadFile = File(...), 
    format: str = Form(...),
    domain: str = Form(default="general")
):
    try:
        suffix = os.path.splitext(file.filename)[1].lower()
        with tempfile.NamedTemporaryFile(delete=False, suffix=suffix) as tmp:
            tmp.write(await file.read())
            tmp_path = tmp.name

        if suffix == ".pdf":
            text = extract_text_from_pdf(tmp_path)
        elif suffix == ".docx":
            text = extract_text_from_docx(tmp_path)
        elif suffix in [".png", ".jpg", ".jpeg", ".bmp", ".tiff"]:
            text = extract_text_from_image(tmp_path)
        else:
            raise HTTPException(status_code=400, detail="Unsupported file type")

        os.unlink(tmp_path)

        summary = summarize_text(text, format, domain)
        return {"summary": summary}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
